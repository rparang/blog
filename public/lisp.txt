(lambda (class . initargs)
      (cond ((or (eq? class <class>)
     (eq? class <entity-class>))
       (let* ((new (%allocate-instance
        class
        (length the-slots-of-a-class)))
        (dsupers (getl initargs 'direct-supers '()))
        (dslots  (map list
          (getl initargs 'direct-slots  '())))
        (cpl     (let loop ((sups dsupers)
          (so-far (list new)))
          (if (null? sups)
              (reverse so-far)
              (loop (class-direct-supers
               (car sups))
              (cons (car sups)
              so-far)))))
        (slots (apply append
          (cons dslots
          (map class-direct-slots
               (cdr cpl)))))
        (nfields 0)
        (field-initializers '())
        (allocator
          (lambda (init)
      (let ((f nfields))
        (set! nfields (+ nfields 1))
        (set! field-initializers
        (cons init field-initializers))
        (list (lambda (o)   (get-field  o f))
        (lambda (o n) (set-field! o f n))))))
        (getters-n-setters
          (map (lambda (s)
           (cons (car s)
           (allocator (lambda () '()))))
         slots)))

         (slot-set! new 'direct-supers      dsupers)
         (slot-set! new 'direct-slots       dslots)
         (slot-set! new 'cpl                cpl)
         (slot-set! new 'slots              slots)
         (slot-set! new 'nfields            nfields)
         (slot-set! new 'field-initializers (reverse
               field-initializers))
         (slot-set! new 'getters-n-setters  getters-n-setters)
         new))
      ((eq? class <generic>)
       (let ((new (%allocate-entity class
            (length (class-slots class)))))
         (slot-set! new 'methods ())
         new))
      ((eq? class <method>)
       (let ((new (%allocate-instance
       class
       (length (class-slots class)))))
         (slot-set! new
        'specializers
        (getl initargs 'specializers))
         (slot-set! new
        'procedure
        (getl initargs 'procedure))
         new)))))